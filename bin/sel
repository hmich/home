#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2008 Igor Akhmetov (Igor.Akhmetov at gmail dot com)
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

from __future__ import with_statement

import os
import os.path
import sys
import subprocess
import signal
import pwd
import cgitb
import locale
import types
from collections import defaultdict

import time
import struct
import fcntl
import termios

import re
import string
import unicodedata
import optparse
import logging
from ConfigParser import SafeConfigParser

import curses
import curses.ascii
import curses.textpad
import curses.wrapper

VERSION = 0.1
PATTERN_TIMEOUT = 2      # time in seconds to wait before resetting of the typed pattern
DEFAULT_EDITOR = 'vim'   # name of the editor to invoke if the EDITOR environment variable is not set
CONFIG_FILE = u'~/.selrc' # name of the file which stores configuration settings

class ExitStatuses:
    NOTHING_SELECTED = 1 # nothing has been selected
    EXEC_ERROR = 2       # exec of the supplied program did not succeed
    INVALID_REGEXP = 3   # invalid regexp for parsing input stream has been passed on the command line

class Attrs:
    @classmethod
    def init(cls):
        color = lambda fg, bg: curses.color_pair(ColorsManager.color(fg, bg))
        cls.DEFAULT = cls.STATUS = cls.LINENUM = color(curses.COLOR_WHITE, -1)
        cls.MARKED = cls.DEFAULT | curses.A_BOLD
        cls.SELECTED = color(curses.COLOR_WHITE, curses.COLOR_BLUE) | curses.A_BOLD
        cls.HIGHLIGHT = color(curses.COLOR_WHITE, curses.COLOR_RED) | curses.A_BOLD
        cls.DIR = color(curses.COLOR_BLUE, -1) | curses.A_BOLD
        cls.EXEC = color(curses.COLOR_GREEN, -1 ) | curses.A_BOLD
        cls.LINK = color(curses.COLOR_CYAN, -1 ) | curses.A_BOLD

class ColorsManager(object):
    _colors = []

    @classmethod
    def init(cls):
        for idx, (fg, bg) in enumerate(cls._colors):
            curses.init_pair(idx, fg, bg)

    @classmethod
    def color(cls, fg, bg):
        c = (fg, bg)
        if c in cls._colors:
            return cls._colors.index(c)
        else:
            cls._colors.append(c)
            return len(cls._colors) - 1

class Keys:
    @classmethod
    def init(cls):
        key = cls._register_key
        cls.DOWN = key(u'KEY_DOWN', u'Down')
        cls.UP = key(u'KEY_UP', u'Up')
        cls.PAGE_DOWN = key(u'KEY_NPAGE', u'Page Down')
        cls.HOME = key(u'KEY_HOME', u'Home')
        cls.PAGE_UP = key(u'KEY_PPAGE', u'Page Up')
        cls.END = key(u'KEY_END', u'End')
        cls.DELETE = key(u'KEY_DC', u'Delete')
        cls.INSERT = key(u'KEY_IC', u'Insert')
        cls.CTRL_H = key(u'KEY_BACKSPACE', u'Ctrl-H')
        cls.BACKSPACE = key(u'\x7f', u'Backspace')
        cls.CTRL_N = key(u'\x0e', u'Ctrl-N')
        cls.CTRL_P = key(u'\x10', u'Ctrl-P')
        cls.CTRL_F = key(u'\x06', u'Ctrl-F')
        cls.CTRL_B = key(u'\x02', u'Ctrl-B')
        cls.CTRL_R = key(u'\x12', u'Ctrl-R')
        cls.CTRL_L = key(u'\x0c', u'Ctrl-L')
        cls.CTRL_X = key(u'\x18', u'Ctrl-X')
        cls.CTRL_D = key(u'\x04', u'Ctrl-D')
        cls.ESCAPE = key(u'\x1b', u'Escape')
        cls.RETURN = key(u'\n', u'Return')
        cls.TAB = key(u'\t', u'Tab')
        cls.F1 = key(u'KEY_F(1)', u'F1')
        cls.F2 = key(u'KEY_F(2)', u'F2')
        cls.F3 = key(u'KEY_F(3)', u'F3')
        cls.F4 = key(u'KEY_F(4)', u'F4')
        cls.F5 = key(u'KEY_F(5)', u'F5')
        cls.F6 = key(u'KEY_F(6)', u'F6')
        cls.F7 = key(u'KEY_F(7)', u'F7')
        cls.F8 = key(u'KEY_F(8)', u'F8')
        cls.F9 = key(u'KEY_F(9)', u'F9')
        cls.F10 = key(u'KEY_F(10)', u'F10')
        cls.F11 = key(u'KEY_F(11)', u'F11')
        cls.F12 = key(u'KEY_F(12)', u'F12')

    _keys = {}
    _revkeys = {}

    @classmethod
    def _register_key(cls, code, str):
        cls._keys[code] = str
        cls._revkeys[str] = code
        return code

    @classmethod
    def str(cls, code):
        if code in cls._keys:
            return cls._keys[code]
        else:
            return "'%s'" % code

    @classmethod
    def code(cls, str):
        if str[0] == "'":
            return str[1:-1]
        else:
            return cls._revkeys[str]

# os utilities
def touni(str):
    return unicode(str, locale.getpreferredencoding())

def fromuni(str):
    return str.encode(locale.getpreferredencoding())

def getcwd():
    return touni(os.getcwd())

def listdir_sorted(dir):
    # conversion from unicode is needed to allow the program run under cygwin
    for _, dirs, files in os.walk(fromuni(dir)):
        return map(touni, sorted(dirs, key=string.lower) + sorted(files, key=string.lower) or [os.pardir])

def shell_path():
    return os.getenv('SHELL') or pwd.getpwuid(os.geteuid())[6]

def editor_name():
    return os.getenv('EDITOR') or DEFAULT_EDITOR

def program_name():
    return os.path.basename(sys.argv[0])

# string utilities
def quote_string(s):
    return u'"%s"' % s

def is_printable_char(c):
    try:
        return unicodedata.category(c)[0] in 'LNPS'
    except:
        return False

class Item(object):
    def __init__(self, str, action, attr = None):
        self._str = str
        self._marked = False
        self._action = action
        self.attr = attr or Attrs.DEFAULT

    def action(self):
        self._action(self)

    def _getmarked(self):
        return self._marked

    def _setmarked(self, val):
        if self._marked != val:
            self._marked = val
            self._owner._item_state_changed(self._idx, val)

    marked = property(_getmarked, _setmarked)

    def __unicode__(self):
        return self._str

    def _mark_str(self):
        if not self._owner.has_marked():
            return ''
        return u'[%s] ' % (u'x' if self.marked else u' ')

    def screen_str(self):
        return self._mark_str() + unicode(self)

    def result_str(self):
        return self._str

class FileItem(Item):
    def __init__(self, str, action, attr, suffix):
        Item.__init__(self, str, action, attr)
        self._suffix = suffix

    def screen_str(self):
        return Item.screen_str(self) + self._suffix

    def result_str(self):
        return os.path.join(getcwd(), unicode(self))

class Link(Item):
    def __init__(self, str, action):
        Item.__init__(self, str, action, Attrs.LINK)
        self._to = os.readlink(self.result_str())

    def screen_str(self):
        return u'%s@ -> %s' % (Item.screen_str(self), self._to)

    def result_str(self):
        return os.path.join(getcwd(), unicode(self))

class Items:
    def __init__(self, items):
        self._set_items(items)
        self.item_changed_event = []
        self.has_marked_event = []

    def has_marked(self):
        return self._nmarked > 0

    def index(self, val):
        return self._items.index(val)

    def _set_items(self, items):
        self._items = items
        for idx, item in enumerate(items):
            item._owner = self
            item._idx = idx
        self._nmarked = sum(int(item.marked) for item in items)

    def remove(self, items):
        for idx in reversed(list(items)):
            del self._items[idx]
        self._set_items(self._items)

    def remove_items(self, items):
        s = set(items)
        for idx, item in reversed(list(enumerate(self._items))):
            if item in s:
                del self._items[idx]
        self._set_items(self._items)

    def _item_state_changed(self, idx, val):
        nmarked = self._nmarked
        self._nmarked += 1 if val else -1

        for listener in self.item_changed_event:
            listener(idx)
        if not nmarked or not self._nmarked:
            for listener in self.has_marked_event:
                listener()

    def __len__(self):
        return len(self._items)

    def __getitem__(self, idx):
        return self._items[idx]

class TermSize:
    @classmethod
    def init(cls):
        cls.height, cls.width = struct.unpack("hhhh", fcntl.ioctl(sys.__stdout__, termios.TIOCGWINSZ, "\000"*8))[0:2]

class Status:
    def __init__(self):
        self.win = curses.newwin(1, TermSize.width, TermSize.height - 1, 0)

    def put(self, str, attr):
        self.win.move(0, 0)
        self.win.clrtoeol()
        self.win.attrset(attr)
        self.win.addstr(fromuni(str[:TermSize.width - 1]))
        self.win.refresh()

    def query(self, str):
        str += u' '
        self.put(str, Attrs.STATUS)
        win = curses.newwin(1, TermSize.width - len(str), TermSize.height - 1, len(str))
        return curses.textpad.Textbox(win).edit().strip()

class ScrollingList:
    def __init__(self, owner, nitems, lines, idx, offset):
        self.nitems = nitems
        self.lines = lines
        self.owner = owner
        self.idx = self._bound_idx(idx)
        self.offset = offset
        self._fix_offset()

    def _bound_idx(self, idx):
        return max(0, min(idx, self.nitems - 1))

    def _bound_offset(self, offset):
        return max(0, min(offset, self.nitems - self.lines))

    def _fix_offset(self):
        if not self.contains_line(self.idx):
            if self.idx < self.offset:
                self.offset = self.idx
            else:
                self.offset = self.idx - self.lines + 1

        self.offset = self._bound_offset(self.offset)

    def __unicode__(self):
        nvisible_items = min(self.nitems - self.offset, self.lines)
        return u'%d-%d of %d' % (self.offset + 1, self.offset + nvisible_items, self.nitems)

    def contains_line(self, line):
        return self.offset <= line < self.offset + self.lines

    def visible_lines(self):
        return xrange(self.offset, self.offset + self.lines)

    def change_size(self, nitems):
        self.nitems = nitems
        self.idx = self._bound_idx(self.idx)
        self._fix_offset()

    def change_item(self, arg):
        previdx, prevoffset = self.idx, self.offset

        self.idx = self._bound_idx(arg)
        self._fix_offset()

        diff = self.offset - prevoffset

        if -1 <= diff <= 1:
            self.owner.scr.scroll(diff)
            self.owner.draw_item(previdx)
            self.owner.draw_item(self.idx)
        else:
            self.owner.redraw()

    def next_page(self):
        if self.idx - self.offset == self.lines - 1:
            self.change_item(self.idx + self.lines)
        else:
            self.change_item(self.offset + self.lines - 1)

    def prev_page(self):
        if self.idx == self.offset:
            self.change_item(self.idx - self.lines)
        else:
            self.change_item(self.offset)

def simple_factory(owner, str):
    return Item(str, lambda item: owner.accept_selection())

def filesystem_factory(owner, path):
    accept = lambda item: owner.accept_selection()

    def read_dir(item):
        if not owner.items.has_marked():
            if unicode(item) == touni(os.pardir):
                owner.up_dir()
            else:
                owner.read_dir(path)
        else:
            owner.accept_selection()

    if os.path.isdir(fromuni(path)):
        if os.path.islink(fromuni(path)):
            return Link(path, read_dir)
        else:
            return FileItem(path, read_dir, Attrs.DIR, u'/')
    elif os.access(fromuni(path), os.X_OK):
        return FileItem(path, accept, Attrs.EXEC, u'*')
    elif os.path.islink(fromuni(path)):
        return Link(path, accept)
    else:
        return FileItem(path, accept, Attrs.DEFAULT, u'')

class ResizeError(Exception):
    def __init__(self):
        Exception.__init__(self)

class InvocationError(Exception):
    def __init__(self, cmd, wait_for_keypress):
        Exception.__init__(self)
        self.cmd = cmd
        self.wait_for_keypress = wait_for_keypress

class StrHighlighter:
    def __init__(self, str):
        self.str = str

    def __call__(self, str, start):
        idx = str.lower().find(self.str, start)
        if idx == -1:
            return -1, -1
        return idx, idx + len(self.str)

class RegexHighlighter:
    def __init__(self, regex):
        self.regex = regex

    def __call__(self, str, start):
        match = self.regex.search(str[start:])
        if not match:
            return -1, -1
        return start + match.start(), start + match.end()

class Closure:
    def __init__(self, func, args):
        self._func = func
        self._args = args
        self._help = u'%s %s' % (func._help, str(args) if args else u'')

    def __call__(self):
        self._func(**dict(self._args))

    def __eq__(self, other):
        return self._func == other._func and self._args == other._args

    def __hash__(self):
        return hash(self._func)

    def __repr__(self):
        return '%s %s' % (self._func.__name__, repr(self._args))

class Bindings:
    BINDINGS_SECTION = 'bindings'
    INTERACTIVE_BINDINGS_SECTION = 'interactive-bindings'

    def __init__(self, owner, interactive):
        cfg_file = os.path.expanduser(CONFIG_FILE)
        has_cfg_file = os.path.isfile(cfg_file)

        if not has_cfg_file or not self._load_bindings(cfg_file):
            bindings = self._keys_map(self._default_bindings(owner))
            interactive_bindings = self._keys_map(self._interactive_bindings(owner))

        if not has_cfg_file:
            try:
                self._save_bindings(cfg_file, bindings, interactive_bindings)
            except:
                pass

        self._map = bindings
        if interactive:
            self._map.update(interactive_bindings)

    def _keys_map(self, bindings):
        res = {}
        for func, keys in bindings.items():
            for key in keys:
                res[key] = func
        return res

    def _default_bindings(self, owner):
        return {
            owner.next_item:           [Keys.DOWN, u'J', Keys.CTRL_N],
            owner.prev_item:           [Keys.UP, Keys.CTRL_P, u'K'],
            owner.next_page:           [Keys.PAGE_DOWN, Keys.CTRL_F, u'H'],
            owner.prev_page:           [Keys.PAGE_UP, Keys.CTRL_B, u'L'],
            owner.first_item:          [Keys.HOME, u'<'],
            owner.last_item:           [Keys.END, u'>'],
            owner.remove_marked:       [Keys.DELETE, u'X'],
            owner.toggle_item:         [Keys.INSERT, u' '],
            owner.invert_marks:        [u'~'],
            owner.mark_all:            [u'*'],
            owner.filter_by_mark:      [Keys.TAB],
            owner.goto_line:           [u'G'],
            owner.mark_by_regex:       [u'%'],
            owner.search_by_regex:     [u'/'],
            owner.restore_items:       [Keys.ESCAPE],
            owner.redraw:              [Keys.CTRL_L],
            owner.show_bindings:       [Keys.F1, u'?', u'H'],
            owner.return_none:         [Keys.CTRL_X, u'Q'],
            owner.return_pwd:          [Keys.CTRL_D, u'D'],
            owner.current_item_action: [Keys.RETURN],
            owner.query_run_command:   [u'!'],
            owner.invoke_shell:        [u'$'],
            owner.restore_items:       [Keys.BACKSPACE, Keys.CTRL_H, u'^'],
            owner.invoke_editor:       [Keys.F3, Keys.F4],
            Closure(owner.run_command, [('cmd', 'cygstart'), ('wait_for_keypress', False)]): [Keys.F2],
            Closure(owner.run_command, [('cmd', 'rm -fr'), ('wait_for_keypress', False)]): [Keys.F8],}

    def _interactive_bindings(self, owner):
        return {
            owner.restore_or_up_dir:   [Keys.BACKSPACE, Keys.CTRL_H, u'^'],
            owner.reread_dir:          [Keys.CTRL_R, u'R'],
            owner.query_chdir:         [u'C'],}

    def _load_bindings(self, cfg_file):
        try:
            cfg = SafeConfigParser()
            cfg.optionxform = lambda s: s
            cfg.read(cfg_file)

            bindings = self._read_bindings(cfg.items(self.BINDINGS_SECTION))
            interactive_items = self._read_bindings(cfg.items(self.INTERACTIVE_BINDINGS_SECTION))

            return True
        except Exception, e:
            return False

    def _read_bindings(self, owner, bindings):
        res = {}
        for key, func in bindings:
            funcname = func.split()[0]
            argsstr = func[len(funcname):]
            args = eval(argsstr) if argsstr else []
            res[Keys.code(key)] = Closure(getattr(owner, funcname), args)
        return res

    def _save_bindings(self, cfg_file, bindings, interactive_bindings):
        cfg = SafeConfigParser()
        cfg.optionxform = lambda s: s
        self._dump_bindings(cfg, self.BINDINGS_SECTION, bindings)
        self._dump_bindings(cfg, self.INTERACTIVE_BINDINGS_SECTION, interactive_bindings)
        cfg.write(open(cfg_file, 'w'))

    def _dump_bindings(self, cfg, section, bindings):
        cfg.add_section(section)

        for key, func in bindings.items():
            if type(func) == types.MethodType:
                funcname = func.__name__
            else:
                # assuming Closure here...
                funcname = repr(func)
            cfg.set(section, Keys.str(key), funcname)

    def __contains__(self, key):
        return key in self._map

    def __getitem__(self, key):
        return self._map[key]

    def show(self, scr):
        bindings = defaultdict(list)
        for key, func in self._map.items():
            bindings[func].append(key)

        lines = []
        for binding, keys in sorted(bindings.items(), key=lambda key: key[0]._help):
            lines.append((u', '.join(map(Keys.str, keys)), binding._help))
        width = max(len(line[0]) for line in lines) + 1

        text = ([u'Just start typing to narrow down the list. Other keybindings:', u''] +
                 [line[0].ljust(width) + line[1] for line in lines] +
                 [u'', u'Basic customization is available via %s.' % CONFIG_FILE,
                  u'Press any key to continue...'])

        scr.clear()
        scr.attrset(Attrs.DEFAULT)

        for idx, line in enumerate(text):
            if idx < TermSize.height:
                scr.addstr(idx, 0, fromuni(line[:TermSize.width - 1]))

        scr.refresh()
        scr.timeout(-1)
        scr.getch()

class Timer:
    def __init__(self):
        self.reset()

    def reset(self):
        self._time = time.time()

    def elapsed(self):
        return time.time() - self._time

def help(str):
    def decor(func):
        func._help = str
        return func
    return decor

class Screen:
    def __init__(self, factory, matches, options):
        self.factory = factory
        self.matches = matches
        self.items = None
        self.resized = False
        self.list = None
        self.result = None
        self.highlighter = None
        self.msg = None
        self.bindings = Bindings(self, options.interactive)
        self.update_list = self.reread_dir if options.interactive else lambda: None

    def _create_items(self, elems):
        self._set_items([self.factory(self, e) for e in elems])
        self._allitems = None

    def _update_list(self, idx = 0, offset = 0):
        self.list = ScrollingList(self, len(self.items), TermSize.height - 1, idx, offset)
        self.redraw()

    def _set_items(self, items):
        self.items = Items(items)
        self.items.item_changed_event.append(self.draw_item)
        self.items.has_marked_event.append(self.redraw)

    def _getch(self):
        self.scr.timeout(100)
        try:
            res = self.scr.getkey()
            self.scr.timeout(0)
            while True:
                try:
                    res += self.scr.getkey()
                except:
                    return touni(res)
        except:
            return u''

    def _highlightstr(self, y, x, attr, s):
        idx = 0
        ls = s.lower()
        while idx < len(s):
            start = -1
            if self.highlighter:
                start, end = self.highlighter(s, idx)
            if start == -1:
                self.scr.attrset(attr)
                self.scr.addstr(y, x + idx, fromuni(s[idx:]))
                break
            else:
                self.scr.attrset(attr)
                self.scr.addstr(y, x + idx, fromuni(s[idx:start]))

                self.scr.attrset(Attrs.HIGHLIGHT)
                self.scr.addstr(y, x + start, fromuni(s[start:end]))

                idx = end

        self.scr.attrset(attr)

    def draw_item(self, idx, refresh = True):
        if idx >= len(self.items) or not self.list.contains_line(idx):
            return

        y = idx - self.list.offset
        line_num = str(idx + 1).rjust(len(str(len(self.items)))) + u' '
        item = self.items[idx]
        s = item.screen_str()

        self.clear_line(y)
        self.scr.attrset(Attrs.LINENUM)
        self.scr.addstr(y, 0, line_num[:TermSize.width])

        if self.list.idx == idx:
            attr = Attrs.SELECTED
        elif item.marked:
            attr = Attrs.MARKED
        else:
            attr = item.attr

        s = s.ljust(TermSize.width - len(line_num))
        self._highlightstr(y, len(line_num), attr, s[:TermSize.width - len(line_num)])

        if refresh:
            self.scr.refresh()

    def clear_line(self, line):
        self.scr.move(line, 0)
        self.scr.clrtoeol()

    @help(u'redraw')
    def redraw(self):
        for curidx in self.list.visible_lines():
            if curidx < len(self.items):
                self.draw_item(curidx, False)
            else:
                self.clear_line(curidx - self.list.offset)
        self.scr.refresh()

    def current_item(self):
        return self.items[self.list.idx] if self.items else None

    @help(u'perform action on the current item')
    def current_item_action(self):
        return self.current_item().action()

    @help(u'toggle mark on selected item')
    def toggle_item(self):
        item = self.current_item()
        item.marked = not item.marked

    @help(u'invert marks')
    def invert_marks(self):
        for item in self.items:
            item.marked = not item.marked

    @help(u'mark all items')
    def mark_all(self):
        for item in self.items:
            item.marked = True

    def update_status(self):
        if self.msg:
            self.status.put(self.msg, Attrs.HIGHLIGHT)
        else:
            curdir = getcwd()
            self.status.put(curdir + unicode(self.list).rjust(TermSize.width - len(curdir) - 1), Attrs.STATUS)

    @help(u'goto line')
    def goto_line(self):
        linestr = self.status.query(u'Goto line:')
        try:
            line = int(linestr)
        except ValueError:
            self.msg = u'Invalid line number!'
            return
        self.list.change_item(line - 1)

    @help(u'mark by regexp')
    def mark_by_regex(self):
        s = self.status.query(u'Mark by regex:')
        try:
            regex = re.compile(s.strip(), re.IGNORECASE)
        except Exception, e:
            self.msg = u'Invalid regexp: %s' % e
            return

        for item in self.items:
            if regex.search(unicode(item)):
                item.marked = True

    def _filter(self, items):
        if not items:
            self.redraw()
            self.msg = u'No matches!'
            return False
        if not self._allitems:
            self._allitems = self.items
        self._set_items(list(items))
        self._update_list()
        return True

    def _items_by_pattern(self, pat):
        for item in self.items:
            if pat in unicode(item).lower():
                yield item

    def _items_by_regex(self, regex):
        for item in self.items:
            if regex.search(unicode(item).lower()):
                yield item

    def filter_by_pattern(self, pattern):
        self.highlighter = StrHighlighter(pattern)
        return self._filter(list(self._items_by_pattern(pattern)))

    @help(u'filter the list by regexp')
    def search_by_regex(self):
        s = self.status.query(u'Search by regex:')
        if not s:
            return False

        try:
            regex = re.compile(s.strip(), re.IGNORECASE)
        except Exception, e:
            self.msg = u'Invalid regexp: %s' % e
            return

        self.highlighter = RegexHighlighter(regex)
        return self._filter(list(self._items_by_regex(regex)))

    @help(u'show only marked items')
    def filter_by_mark(self):
        if self._allitems:
            self.restore_items()
        else:
            self._clear_highlighter()
            self._filter([item for item in self.items if item.marked])

    def enumerate_selected(self):
        if not self.items:
            return
        if self.items.has_marked():
            for idx, item in enumerate(self.items):
                if item.marked:
                    yield (idx, item)
        else:
            yield (self.list.idx, self.current_item())

    @help(u'remove marked items')
    def remove_marked(self):
        if self._allitems:
            self._allitems.remove_items(item for _, item in self.enumerate_selected())
        self.items.remove(idx for idx, _ in self.enumerate_selected())
        self._update_list(self.list.idx, self.list.offset)

    def read_dir(self, dir):
        try:
            entries = listdir_sorted(dir)
            os.chdir(fromuni(dir))
        except OSError, e:
            self.msg = u'Can\'t read dir %s: %s' % (dir, e)
        else:
            self._create_items(entries)
            self._update_list()

    @help(u'change working directory')
    def query_chdir(self):
        dir = self.status.query(u'Change dir to:')
        dir = os.path.expandvars(os.path.expanduser(dir))
        self.read_dir(dir)

    def up_dir(self):
        (parent, cur) = os.path.split(getcwd())
        self.read_dir(parent)

        for idx, item in enumerate(self.items):
            if unicode(item) == cur:
                self.list.change_item(idx)

    @help(u'reread contents of the current directory')
    def reread_dir(self):
        cur = u''
        if self.items:
            cur = unicode(self.current_item())

        self.read_dir(getcwd())

        if not cur:
            return

        for idx, item in enumerate(self.items):
            if unicode(item) == cur:
                self.list.change_item(idx)
                break

    @help(u'reset current filter')
    def restore_items(self):
        if self.pattern:
            return
        if not self._allitems:
            return
        cur = self.current_item()
        self._set_items(self._allitems)
        self._update_list(self.items.index(cur) if cur else 0)
        self._allitems = None

    @help(u'reset current pattern or filter if any or go to the parent directory')
    def restore_or_up_dir(self):
        if self._allitems:
            self.restore_items()
        else:
            self.up_dir()

    def set_result(self, res):
        self.result = res

    def accept_selection(self):
        self.set_result([item.result_str() for _, item in self.enumerate_selected()])

    @help(u'exit the program without selecting anything')
    def return_none(self):
        return self.set_result([])

    @help(u'exit with the name of the current working directory as the only result')
    def return_pwd(self):
        return owner.set_result([getcwd()])

    @help(u'scroll one page down')
    def next_page(self): self.list.next_page()

    @help(u'scroll one page up')
    def prev_page(self): self.list.prev_page()

    @help(u'goto next line')
    def next_item(self): self.list.change_item(self.list.idx + 1)

    @help(u'goto prev item')
    def prev_item(self): self.list.change_item(self.list.idx - 1)

    @help(u'goto first item in the list')
    def first_item(self): self.list.change_item(0)

    @help(u'goto last item in the list')
    def last_item(self): self.list.change_item(len(self.items) - 1)

    @help(u'show this help')
    def show_bindings(self):
        self.bindings.show(self.scr)
        self.redraw()

    def clear_screen(self):
        self.scr.clear()
        self.scr.refresh()

    def resize(self, *args):
        self.resized = True

    @help(u'invoke shell')
    def invoke_shell(self):
        self.clear_screen()
        raise InvocationError(shell_path(), False)

    @help(u'invoke editor on the marked items')
    def invoke_editor(self):
        self.run_command(editor_name(), False)

    @help(u'run command')
    def run_command(self, cmd, wait_for_keypress=True):
        if not cmd:
            return
        self._clear_highlighter()
        self._clear_pattern()
        self.clear_screen()
        args = [unicode(item) for _, item in self.enumerate_selected()]
        raise InvocationError(cmd + u' ' + u' '.join(map(quote_string, args)), wait_for_keypress)

    @help(u'run command on selection')
    def query_run_command(self):
        self.run_command(self.status.query(u'Run command on selection:'))

    def _clear_highlighter(self):
        if not self.highlighter:
            return
        self.highlighter = None
        self.redraw()

    def _clear_pattern(self):
        if not self.pattern:
            return
        self.pattern = u''
        self._clear_highlighter()

    def run(self, stdscr):
        self.status = Status()
        self.scr = stdscr
        self.scr.scrollok(1)

        if not self.items:
            self._create_items(self.matches)

        if not self.list:
            self._update_list()
        else:
            self._update_list(self.list.idx, self.list.offset)

        self.pattern = u''
        lastpress = Timer()

        while self.result is None:
            self.update_status()

            try:
                c = self._getch()
            except KeyboardInterrupt:
                self.set_result([])
                break

            if self.resized:
                self.resized = False
                raise ResizeError()

            if c in self.bindings:
                self.msg = None
                self.bindings[c]()
                self._clear_highlighter()
                self._clear_pattern()
            elif is_printable_char(c):
                self.msg = None
                self.pattern += c
                lastpress.reset()
                if not self.filter_by_pattern(self.pattern):
                    self._clear_pattern()
            elif c or lastpress.elapsed() > PATTERN_TIMEOUT:
                self._clear_pattern()

        self.clear_screen()

        return self.result

class TTYStdinLocker:
    def __enter__(self):
        self._saved_stdin = os.dup(0)
        os.close(0)
        os.open('/dev/tty', os.O_RDONLY)

    def __exit__(self, *args):
        os.close(0)
        os.dup(self._saved_stdin)

class TTYStdoutLocker:
    def __enter__(self):
        self._saved_stdout = os.dup(1)
        os.close(1)
        os.open('/dev/tty', os.O_RDWR)

    def __exit__(self, *args):
        os.close(1)
        os.dup(self._saved_stdout)

class TTYLocker:
    def __init__(self):
        self.inlocker = TTYStdinLocker()
        self.outlocker = TTYStdoutLocker()

    def __enter__(self):
        self.inlocker.__enter__()
        self.outlocker.__enter__()

    def __exit__(self, *args):
        self.inlocker.__exit__(*args)
        self.outlocker.__exit__(*args)

def separator(options):
    if options.null_terminated:
        return u'\x00'
    elif options.newlines:
        return u'\n'
    else:
        return touni(options.ofs)

def exec_processor(cmd, replacestr):
    def doexec(args):
        if replacestr:
            c = []
            for idx, arg in enumerate(cmd):
                if arg == replacestr:
                    c.extend(args)
                else:
                    c.append(arg)
        else:
            c = cmd + args

        with TTYStdinLocker():
            try:
                os.execlp(c[0], *c)
            except OSError, e:
                sys.stderr.write(u"%s: can not invoke program '%s': %s\n" % (program_name(), c[0], e))
                sys.exit(ExitStatuses.EXEC_ERROR)

    return doexec

def quoting_processor(func):
    return lambda args: func(map(quote_string, args))

def printing_processor(sep):
    return lambda args: sys.stdout.write(fromuni(sep.join(args)))

def create_processor(options, args):
    if args:
        proc = exec_processor(args, options.replacestr)
    else:
        proc = printing_processor(separator(options))
        if options.quote:
            proc = quoting_processor(proc)
    return proc

def process_args():
    parser = optparse.OptionParser(usage='usage: %prog [options] [cmd]...',
                                   version='%prog ' + str(VERSION), description=
'''Depending on whether the input is from a terminal or not,
simulates a simple directory browser, which can be used to select a
number of files, or allows you to select from a number of options,
obtained by parsing input data using the specified regular expression.
If cmd is given, then it is run with the selected items as arguments,
otherwise these items are just printed to the standard output. Please
send bug reports and suggestions to Igor.Akhmetov at gmail dot com.''')

    parser.add_option('-0', '--print0', action='store_true', dest='null_terminated', default=False,
                      help='separate output fields with null character')
    parser.add_option('-a', '--arg-file', action='store', type='string', dest='argfile', default=None,
                      help='read items from ARGFILE instead of standard input')
    parser.add_option('-i', '--replace', action='store', type='string', dest='replacestr', default=None,
                      help='replace occurances of REPLACESTR in the initial arguments with selected items')
    parser.add_option('-n', '--newline', action='store_true', dest='newlines', default=False,
                      help='separate output fields with newlines')
    parser.add_option('-o', '--ofs', action='store', type='string', dest='ofs', default=' ',
                      help='output fields separator, space by default')
    parser.add_option('-r', '--regexp', action='store', type='string', dest='regexp', default='^.*$',
                      help='parse input data using given regular expression')
    parser.add_option('-q', '--quote', action='store_true', dest='quote', default=False,
                      help='quote output fields')

    parser.disable_interspersed_args()
    (options, args) = parser.parse_args()

    return options, create_processor(options, args)

def create_reader(options):
    if options.argfile:
        return open(options.argfile).xreadlines()
    else:
        return sys.stdin.xreadlines()

def itermatches(input, regexp):
    for line in input:
        for match in regexp.findall(line):
            yield match

def run_command(e):
    retcode = None

    curses.reset_shell_mode()

    try:
        retcode = subprocess.call(e.cmd, shell=True)

        if retcode < 0:
            sys.stderr.write('\nChild was terminated by signal %s' % -retcode)
        elif retcode:
            sys.stderr.write('\nChild returned %s' % retcode)
    except OSError, e:
        sys.stderr.write('\nExecution failed: %s' % e)

    if retcode != None and (retcode != 0 or e.wait_for_keypress):
        raw_input('\nPress ENTER to continue')

    curses.reset_prog_mode()

def mainloop(scr, wnd, options):
    # sometimes raises an exception in cygwin
    try:
        curses.curs_set(0)
    except:
        pass

    curses.use_default_colors()
    Attrs.init()
    ColorsManager.init()

    while True:
        try:
            return scr.run(wnd)
        except ResizeError:
            TermSize.init()
        except InvocationError, e:
            run_command(e)
            scr.clear_screen()
            scr.update_list()

def main():
    cgitb.enable(format='text')
    locale.setlocale(locale.LC_ALL, '')

    options, proc = process_args()
    options.interactive = os.isatty(0) and not options.argfile
    if options.interactive:
        matches = listdir_sorted(getcwd())
        factory = filesystem_factory
    else:
        try:
            regexp = re.compile(options.regexp, re.IGNORECASE)
        except Exception, e:
            sys.stderr.write("%s: error compiling regex '%s': %s\n" % (program_name(), options.regexp, e))
            sys.exit(ExitStatuses.INVALID_REGEXP)
        matches = list(itermatches(create_reader(options), regexp))
        factory = simple_factory

    if not matches:
        sys.exit(ExitStatuses.NOTHING_SELECTED)

    with TTYLocker():
        TermSize.init()
        Keys.init()
        scr = Screen(factory, matches, options)
        signal.signal(signal.SIGWINCH, scr.resize)
        res = curses.wrapper(lambda wnd: mainloop(scr, wnd, options))

    if not res:
        sys.exit(ExitStatuses.NOTHING_SELECTED)

    proc(res)

if __name__ == '__main__':
    main()
