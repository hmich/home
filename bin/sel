#!/usr/bin/env python

# Copyright (c) 2008 Igor Akhmetov
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

from __future__ import with_statement

import os
import os.path
import sys
import signal
import pwd

import time
import struct
import fcntl
import termios

import re
import string
import optparse
import logging

import curses
import curses.ascii
import curses.textpad
import curses.wrapper

VERSION = 0.1
PATTERN_TIMEOUT = 2
NOTHING_SELECTED_EXIT_STATUS = 1

class Attrs:
    @classmethod
    def init(cls):
        color = lambda fg, bg: curses.color_pair(ColorsManager.color(fg, bg))
        cls.DEFAULT = cls.STATUS = cls.LINENUM = color(curses.COLOR_WHITE, -1)
        cls.MARKED = cls.DEFAULT | curses.A_BOLD
        cls.SELECTED = color(curses.COLOR_WHITE, curses.COLOR_BLUE) | curses.A_BOLD
        cls.HIGHLIGHT = color(curses.COLOR_WHITE, curses.COLOR_RED) | curses.A_BOLD
        cls.DIR = color(curses.COLOR_BLUE, -1) | curses.A_BOLD
        cls.EXEC = color(curses.COLOR_GREEN, -1 ) | curses.A_BOLD
        cls.LINK = color(curses.COLOR_CYAN, -1 ) | curses.A_BOLD

class ColorsManager(object):
    _colors = []

    @classmethod
    def init(cls):
        for idx, (fg, bg) in enumerate(cls._colors):
            curses.init_pair(idx, fg, bg)

    @classmethod
    def color(cls, fg, bg):
        cls._colors.append((fg, bg))
        return len(cls._colors) - 1

class Item(object):
    def __init__(self, str, action, attr = None):
        self._str = str
        self._marked = False
        self._action = action
        self.attr = attr or Attrs.DEFAULT

    def action(self):
        self._action(self)

    def _getmarked(self):
        return self._marked

    def _setmarked(self, val):
        if self._marked != val:
            self._marked = val
            self._owner._item_state_changed(self._idx, val)

    marked = property(_getmarked, _setmarked)

    def __str__(self):
        return self._str

    def _mark_str(self):
        if not self._owner.has_marked():
            return ''
        return '[%s] ' % ('x' if self.marked else ' ')

    def screen_str(self):
        return self._mark_str() + str(self)

class FileItem(Item):
    def __init__(self, str, action, attr, suffix):
        Item.__init__(self, str, action, attr)
        self._suffix = suffix

    def screen_str(self):
        return Item.screen_str(self) + self._suffix

class Items:
    def __init__(self, items):
        self._set_items(items)
        self.item_changed_event = []
        self.has_marked_event = []

    def has_marked(self):
        return self._nmarked > 0

    def index(self, val):
        return self._items.index(val)

    def _set_items(self, items):
        self._items = items
        for idx, item in enumerate(items):
            item._owner = self
            item._idx = idx
        self._nmarked = sum(int(item.marked) for item in items)

    def remove(self, items):
        for idx in reversed(list(items)):
            del self._items[idx]
        self._set_items(self._items)

    def remove_items(self, items):
        s = set(items)
        for idx, item in reversed(list(enumerate(self._items))):
            if item in s:
                del self._items[idx]
        self._set_items(self._items)

    def _item_state_changed(self, idx, val):
        nmarked = self._nmarked
        self._nmarked += 1 if val else -1

        for listener in self.item_changed_event:
            listener(idx)
        if not nmarked or not self._nmarked:
            for listener in self.has_marked_event:
                listener()

    def __len__(self):
        return len(self._items)

    def __getitem__(self, idx):
        return self._items[idx]

class TermSize:
    @classmethod
    def init(cls):
        cls.height, cls.width = struct.unpack("hhhh", fcntl.ioctl(sys.__stdout__, termios.TIOCGWINSZ, "\000"*8))[0:2]

class Status:
    def __init__(self):
        self.win = curses.newwin(1, TermSize.width, TermSize.height - 1, 0)

    def clear(self):
        self.win.move(0, 0)
        self.win.clrtoeol()

    def put(self, str, attr):
        self.clear()
        self.win.attrset(attr)
        self.win.addstr(str[:TermSize.width - 1])
        self.win.refresh()

    def query(self, str):
        str += ' '
        self.put(str, Attrs.STATUS)
        win = curses.newwin(1, TermSize.width - len(str), TermSize.height - 1, len(str))
        return curses.textpad.Textbox(win).edit()

class ScrollingList:
    def __init__(self, owner, nitems, lines, idx, offset):
        self.nitems = nitems
        self.lines = lines
        self.owner = owner
        self.offset = self._bound_offset(offset)
        self.idx = self._bound_idx(idx)

    def _bound_idx(self, idx):
        return max(0, min(idx, self.nitems - 1))

    def _bound_offset(self, offset):
        return max(0, min(offset, self.nitems - self.lines))

    def __str__(self):
        nvisible_items = min(self.nitems - self.offset, self.lines)
        return "%d-%d of %d" % (self.offset + 1, self.offset + nvisible_items, self.nitems)

    def contains_line(self, line):
        return self.offset <= line < self.offset + self.lines

    def visible_lines(self):
        return xrange(self.offset, self.offset + self.lines)

    def change_size(self, nitems):
        self.nitems = nitems
        self.offset = self._bound_offset(self.offset)
        self.idx = self._bound_idx(self.idx)

    def change_item(self, arg):
        previdx, prevoffset = self.idx, self.offset

        self.idx = self._bound_idx(arg)
        if not self.contains_line(self.idx):
            if self.idx < self.offset:
                self.offset = self.idx
            else:
                self.offset = self.idx - self.lines + 1

        self.offset = self._bound_offset(self.offset)

        if self.offset == prevoffset:
            self.owner.draw_item(previdx)
            self.owner.draw_item(self.idx)
        else:
            self.owner.redraw()

    def next_page(self):
        if self.idx - self.offset == self.lines - 1:
            self.change_item(self.idx + self.lines)
        else:
            self.change_item(self.offset + self.lines - 1)

    def prev_page(self):
        if self.idx == self.offset:
            self.change_item(self.idx - self.lines)
        else:
            self.change_item(self.offset)

def listdir_sorted(dir):
    entries = os.listdir(dir)
    entries.sort(key=string.lower)

    dirs = [f for f in entries if os.path.isdir(os.path.join(dir, f))]
    files = [f for f in entries if os.path.isfile(os.path.join(dir, f))]

    return dirs + files

def quote_string(s):
    return '"' + s + '"'

def simple_factory(owner, str):
    return Item(str, lambda item: owner.accept_selection())

def filesystem_factory(owner, path):
    accept = lambda item: owner.accept_selection()

    if os.path.isdir(path):
        def read_dir(item):
            if not owner.items.has_marked():
                if str(item) == '..':
                    owner.up_dir()
                else:
                    owner.read_dir(path)
            else:
                owner.accept_selection()

        if os.path.islink(path):
            return FileItem(path, read_dir, Attrs.LINK, '/@')
        else:
            return FileItem(path, read_dir, Attrs.DIR, '/')
    elif os.access(path, os.X_OK):
        return FileItem(path, accept, Attrs.EXEC, '*')
    elif os.path.islink(path):
        return FileItem(path, accept, Attrs.LINK, '@')
    else:
        return Item(path, accept)

class ResizeError(Exception):
    def __init__(self):
        Exception.__init__(self)

class InvocationError(Exception):
    def __init__(self, cmd):
        Exception.__init__(self)
        self.cmd = cmd

class StrHighlighter:
    def __init__(self, str):
        self.str = str

    def __call__(self, str, start):
        idx = str.find(self.str, start)
        if idx == -1:
            return -1, -1
        return idx, idx + len(self.str)

class RegexHighlighter:
    def __init__(self, regex):
        self.regex = regex

    def __call__(self, str, start):
        match = self.regex.search(str[start:])
        if not match:
            return -1, -1
        return start + match.start(), start + match.end()

def shell_path():
    return os.getenv('SHELL') or pwd.getpwuid(os.geteuid())[6]

class Screen:
    def __init__(self, factory, matches, browse_mode):
        self.factory = factory
        self.matches = matches
        self.items = None
        self.resized = False
        self.browse_mode = browse_mode
        self.list = None
        self.result = None
        self.highlighter = None
        self.msg = None

    def _create_items(self, elems):
        self._set_items([self.factory(self, e) for e in elems])
        self._allitems = None

    def _update_list(self, idx = 0, offset = 0):
        self.list = ScrollingList(self, len(self.items), TermSize.height - 1, idx, offset)
        self.redraw()

    def _set_items(self, items):
        self.items = Items(items)
        self.items.item_changed_event.append(self.draw_item)
        self.items.has_marked_event.append(self.redraw)

    def getch(self):
        self.scr.timeout(100)
        return self.scr.getch()

    def highlightstr(self, y, x, attr, s):
        idx = 0
        ls = s.lower()
        while idx < len(s):
            start = -1
            if self.highlighter:
                start, end = self.highlighter(s, idx)
            if start == -1:
                self.scr.attrset(attr)
                self.scr.addstr(y, x + idx, s[idx:])
                break
            else:
                self.scr.attrset(attr)
                self.scr.addstr(y, x + idx, s[idx:start])

                self.scr.attrset(Attrs.HIGHLIGHT)
                self.scr.addstr(y, x + start, s[start:end])

                idx = end
        self.scr.attrset(attr)

    def draw_item(self, idx, refresh = True):
        if idx >= len(self.items) or not self.list.contains_line(idx):
            return

        y = idx - self.list.offset
        line_num = str(idx + 1).rjust(len(str(len(self.items)))) + ' '
        item = self.items[idx]
        s = item.screen_str()

        self.clear_line(y)
        self.scr.attrset(Attrs.LINENUM)
        self.scr.addstr(y, 0, line_num[:TermSize.width])

        if self.list.idx == idx:
            attr = Attrs.SELECTED
        elif item.marked:
            attr = Attrs.MARKED
        else:
            attr = item.attr

        s = s.ljust(TermSize.width - len(line_num))
        self.highlightstr(y, len(line_num), attr, s[:TermSize.width - len(line_num)])

        if refresh:
            self.scr.refresh()

    def clear_line(self, line):
        self.scr.move(line, 0)
        self.scr.clrtoeol()

    def redraw(self):
        for curidx in self.list.visible_lines():
            if curidx < len(self.items):
                self.draw_item(curidx, False)
            else:
                self.clear_line(curidx - self.list.offset)
        self.scr.refresh()

    def current_item(self):
        return self.items[self.list.idx]

    def toggle_item(self):
        item = self.current_item()
        item.marked = not item.marked

    def invert_selection(self):
        for item in self.items:
            item.marked = not item.marked

    def select_all(self):
        for item in self.items:
            item.marked = True

    def update_status(self):
        if self.msg:
            self.status.put(self.msg, Attrs.HIGHLIGHT)
        else:
            curdir = os.getcwd()
            self.status.put(curdir + str(self.list).rjust(TermSize.width - len(curdir) - 1), Attrs.STATUS)

    def goto_line(self):
        linestr = self.status.query("Goto line:")
        try:
            line = int(linestr)
        except ValueError:
            self.msg = "Invalid line number"
            return
        self.list.change_item(line - 1)

    def mark_by_regex(self):
        s = self.status.query("Mark by regex:")
        try:
            regex = re.compile(s.strip(), re.IGNORECASE)
        except Exception, e:
            self.msg = "Invalid regexp: " + str(e)
            return

        for item in self.items:
            if regex.search(str(item)):
                item.marked = True

    def _filter(self, items):
        if not items:
            self.redraw()
            self.msg = 'No matches!'
            return False
        if not self._allitems:
            self._allitems = self.items
        self._set_items(list(items))
        self._update_list()
        return True

    def _items_by_pattern(self, pat):
        for item in self.items:
            if pat in str(item).lower():
                yield item

    def _items_by_regex(self, regex):
        for item in self.items:
            if regex.search(str(item).lower()):
                yield item

    def filter_by_pattern(self, pattern):
        self.highlighter = StrHighlighter(pattern)
        return self._filter(list(self._items_by_pattern(pattern)))

    def search_by_regex(self):
        s = self.status.query("Search by regex:")
        if not s:
            return False

        try:
            regex = re.compile(s.strip(), re.IGNORECASE)
        except Exception, e:
            self.msg = "Invalid regexp: " + str(e)
            return

        self.highlighter = RegexHighlighter(regex)
        return self._filter(list(self._items_by_regex(regex)))

    def enumerate_selected(self):
        if not self.items:
            return
        if self.items.has_marked():
            for idx, item in enumerate(self.items):
                if item.marked:
                    yield (idx, item)
        else:
            yield (self.list.idx, self.current_item())

    def remove_marked(self):
        if self._allitems:
            self._allitems.remove_items(item for _, item in self.enumerate_selected())
        self.items.remove(idx for idx, _ in self.enumerate_selected())
        self._update_list(self.list.idx, self.list.offset)

    def init_curses(self):
        curses.use_default_colors()
        Attrs.init()
        ColorsManager.init()

        # sometimes raises an exception in cygwin
        try:
            curses.curs_set(0)
        except:
            pass

    def read_dir(self, dir):
        try:
            entries = listdir_sorted(dir) or ['..']
            os.chdir(dir)
        except OSError, e:
            self.msg = 'Can\'t read dir: ' + str(e)
        else:
            self._create_items(entries)
            self._update_list()

    def up_dir(self):
        if not self.browse_mode:
            return

        (parent, cur) = os.path.split(os.getcwd())
        self.read_dir(parent)

        for idx, item in enumerate(self.items):
            if str(item) == cur:
                self.list.change_item(idx)

    def reread_dir(self):
        if not self.browse_mode:
            return

        cur = ''
        if self.items:
            cur = str(self.current_item())

        self.read_dir(os.getcwd())
        if not cur:
            return

        for idx, item in enumerate(self.items):
            if str(item) == cur:
                self.list.change_item(idx)
                break

    def restore_items(self):
        if not self._allitems:
            return
        cur = self.current_item() if self.items else  None
        self._set_items(list(self._allitems))
        self._update_list(self.items.index(cur) if cur else 0)
        self._allitems = None

    def restore_or_up_dir(self):
        if self._allitems:
            self.restore_items()
        else:
            self.up_dir()

    def set_result(self, res):
        self.result = res;

    def accept_selection(self):
        self.set_result([item for _, item in self.enumerate_selected()])

    next_page  = lambda self: self.list.next_page()
    prev_page  = lambda self: self.list.prev_page()
    next_item  = lambda self: self.list.change_item(self.list.idx + 1)
    prev_item  = lambda self: self.list.change_item(self.list.idx - 1)
    first_item = lambda self: self.list.change_item(0)
    last_item  = lambda self: self.list.change_item(len(self.items) - 1)

    def clear_screen(self):
        self.scr.clear()
        self.scr.refresh()

    def resize(self, *args):
        self.resized = True

    def invoke_shell(self):
        self.clear_screen()
        raise InvocationError(shell_path())

    def run_command(self, cmd):
        if not cmd:
            return
        self.clear_screen()
        args = [str(item) for _, item in self.enumerate_selected()]
        raise InvocationError(cmd + " " + " ".join(map(quote_string, args)))

    def query_run_command(self):
        self.run_command(self.status.query("Run command on selection:"))

    def clear_highlighter(self):
        if not self.highlighter:
            return
        self.highlighter = None
        self.redraw()

    def clear_pattern(self):
        if not self.pattern:
            return
        self.pattern = ''
        self.clear_highlighter()

    def keybindings(self):
        return {
            curses.KEY_DOWN:      self.next_item,
            ord('J'):             self.next_item,
            14:                   self.next_item, # Ctrl-N
            curses.KEY_UP:        self.prev_item,
            ord('K'):             self.prev_item,
            16:                   self.prev_item, # Ctrl-P
            curses.KEY_NPAGE:     self.next_page,
            ord('H'):             self.next_page,
            6:                    self.next_page, # Ctrl-F
            curses.KEY_PPAGE:     self.prev_page,
            ord('L'):             self.prev_page,
            2:                    self.prev_page, # Ctrl-B
            curses.KEY_HOME:      self.first_item,
            ord('<'):             self.first_item,
            curses.KEY_END:       self.last_item,
            ord('>'):             self.last_item,
            curses.KEY_DC:        self.remove_marked,
            ord('D'):             self.remove_marked,
            curses.KEY_IC:        self.toggle_item,
            ord(' '):             self.toggle_item,
            ord('~'):             self.invert_selection,
            ord('!'):             self.query_run_command,
            ord('$'):             self.invoke_shell,
            ord('*'):             self.select_all,
            ord('G'):             self.goto_line,
            ord('%'):             self.mark_by_regex,
            ord('/'):             self.search_by_regex,
            curses.KEY_BACKSPACE: self.restore_or_up_dir,
            ord('^'):             self.up_dir,
            ord('R'):             self.reread_dir,
            18:                   self.reread_dir, # Ctrl-R
            27:                   self.restore_items, # Esc
            12:                   self.redraw, # Ctrl-L
            24:                   lambda: self.set_result([]), # Ctrl-X
            4:                    lambda: self.set_result([os.getcwd()]), # Ctrl-D
            ord('\n'):            lambda: self.current_item().action(),
            curses.KEY_F2:        lambda: self.run_command('cygstart'),
            curses.KEY_F3:        lambda: self.run_command('vim'),
            curses.KEY_F4:        lambda: self.run_command('vim'),
        }

    def mainloop(self, stdscr):
        self.init_curses()
        self.status = Status()
        self.scr = stdscr

        if not self.items:
            self._create_items(self.matches)

        if not self.list:
            self._update_list()
        else:
            self._update_list(self.list.idx, self.list.offset)

        self.pattern = ''
        lastpress = time.time()
        bindings = self.keybindings()

        while self.result == None:
            self.update_status()

            try:
                c = self.getch()
            except KeyboardInterrupt:
                break

            if self.resized:
                self.resized = False
                raise ResizeError()

            if bindings.get(c):
                self.msg = None
                self.clear_highlighter()
                self.clear_pattern()
                bindings[c]()
            elif curses.ascii.isprint(c):
                self.msg = None
                self.pattern += chr(c)
                lastpress = time.time()
                if not self.filter_by_pattern(self.pattern):
                    self.clear_pattern()
            elif c != -1 or time.time() - lastpress > PATTERN_TIMEOUT:
                self.clear_pattern()

        self.clear_screen()

        return map(lambda x: os.path.join(os.getcwd(), str(x)), self.result or [])

class TTYStdinLocker:
    def __enter__(self):
        self._saved_stdin = os.dup(0)
        os.close(0)
        os.open('/dev/tty', os.O_RDONLY)

    def __exit__(self, exc_type, exc_val, exc_tb):
        os.close(0)
        os.dup(self._saved_stdin)

class TTYStdoutLocker:
    def __enter__(self):
        self._saved_stdout = os.dup(1)
        os.close(1)
        os.open('/dev/tty', os.O_RDWR)

    def __exit__(self, exc_type, exc_val, exc_tb):
        os.close(1)
        os.dup(self._saved_stdout)

class TTYLocker:
    def __init__(self):
        self.inlocker = TTYStdinLocker()
        self.outlocker = TTYStdoutLocker()

    def __enter__(self):
        self.inlocker.__enter__()
        self.outlocker.__enter__()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.inlocker.__exit__(exc_type, exc_val, exc_tb)
        self.outlocker.__exit__(exc_type, exc_val, exc_tb)

def separator(options):
    if options.null_terminated:
        return '\x00'
    elif options.newlines:
        return '\n'
    else:
        return options.ofs

def exec_processor(cmd):
    def doexec(args):
        with TTYStdinLocker():
            try:
                os.execlp(cmd[0], *(cmd + args))
            except OSError, e:
                sys.stderr.write('Can not invoke program: ' + str(e) + '\n')
    return doexec

def quoting_processor(func):
    return lambda args: func(map(quote_string, args))

def print_processor(sep):
    return lambda args: sys.stdout.write(sep.join(args))

def create_processor(options, args):
    if args:
        proc = exec_processor(args)
    else:
        proc = print_processor(separator(options))
        if options.quote:
            proc = quoting_processor(proc)
    return proc

def process_args():
    parser = optparse.OptionParser(usage='usage: %prog [options] [regexp]...', version='%prog ' + str(VERSION), description=
'''Allows you to quickly select from a number of options,
including filenames and strings parsed from the standard input using regexps.
Please send bug reports and suggestions to Igor.Akhmetov _at_ gmail.com.''')

    parser.add_option('-0', '--print0', action='store_true', dest='null_terminated', default=False, help='separate output fields with null character')
    parser.add_option('-n', '--newline', action='store_true', dest='newlines', default=False, help='separate output fields with newlines')
    parser.add_option('-o', '--ofs', action='store', type='string', dest='ofs', default=' ', help='output fields separator, space by default')
    parser.add_option('-q', '--quote', action='store_true', dest='quote', default=False, help='quote output fields')
    parser.add_option('-r', '--regexp', action='store', type='string', dest='regexp', default='^.*$', help='regular expression for parsing input data')

    parser.disable_interspersed_args()
    (options, args) = parser.parse_args()

    return options, create_processor(options, args)

def itermatches(regexps):
    for line in sys.stdin.xreadlines():
        for re in regexps:
            for match in re.findall(line):
                yield match

def main():
    options, proc = process_args()
    browse_mode = os.isatty(0)
    if browse_mode:
        matches = listdir_sorted(os.getcwd())
        factory = filesystem_factory
    else:
        matches = list(itermatches([re.compile(options.regexp, re.IGNORECASE)]))
        factory = simple_factory

    if not matches:
        sys.exit(NOTHING_SELECTED_EXIT_STATUS)

    with TTYLocker():
        TermSize.init()
        scr = Screen(factory, matches, browse_mode)
        signal.signal(signal.SIGWINCH, scr.resize)

        res = None
        while res == None:
            try:
                res = curses.wrapper(scr.mainloop)
            except ResizeError:
                TermSize.init()
            except InvocationError, e:
                if os.system(e.cmd):
                    scr.msg = 'Nonzero exit status!'
                scr.reread_dir()
            except curses.error:
                break

    if not res:
        sys.exit(NOTHING_SELECTED_EXIT_STATUS)

    proc(res)

if __name__ == '__main__':
    main()
